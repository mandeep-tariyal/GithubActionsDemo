# Unique name for this workflow
name: Validate PR on develop branch

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "develop". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ developement ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '18.18.0'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name : 'Read PR Body and parse Test classes'
              id: parse_tests  # Add an ID to the step
              env:
               PR_BODY: ${{ github.event.pull_request.body }}
              run: |
                echo $PR_BODY > ./pr_body.txt
                node ./parsePR.js              
                TESTS=$(cat testsToRun.txt)       
                echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                echo "::set-output name=test_classes::$TESTS"  
            # Update the step that extracts test class names from the PR body to save them to a file uniquely associated with the PR.
            - name: 'Store Test Classes in Git'
              run: |
               git checkout developement
               PR_NUMBER=${{ github.event.pull_request.number }}
               TESTS=${{ steps.parse_tests.outputs.test_classes }}
               echo "$TESTS" > .github/test-classes/pr-$PR_NUMBER.txt
               git config --global user.name "github-actions"
               git config --global user.email "github-actions@github.com"               
               git add .github/test-classes/pr-$PR_NUMBER.txt
               git commit -m "Store test classes for PR #$PR_NUMBER"
               git push origin -u developement
               trap 'echo "Job failed, removing $FILE_PATH"; rm -f $FILE_PATH' ERR

            
            - name: 'Retrieve Test Classes for PR'
              run: |
                   PR_NUMBER=${{ github.event.pull_request.number }}
                   if [ -f .github/test-classes/pr-$PR_NUMBER.txt ]; then
                     TESTS=$(cat .github/test-classes/pr-$PR_NUMBER.txt)
                     echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                    else
                    # Set default APEX_TESTS if the file doesn't exist.
                    echo "APEX_TESTS" 
                    # The pull request body is available through the github context object
                    # Set PR_BODY environment variable
                    echo "PR_BODY=${{ github.event.pull_request.body }}" >> $GITHUB_ENV # Or export if needed later in the same shell script
                   fi

          
                 
                  
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                 npm install -g sfdx-cli

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk

            - name: 'Remove existing Node.js'
              run: sudo rm -rf /usr/local/bin/node /usr/local/bin/npm /usr/local/lib/node_modules

            - name: 'Install Node.js'
              uses: dcodeIO/setup-node-nvm@master
              with:
                node-version: '20.0.0'
                node-mirror: https://nodejs.org/dist/
            

            - name: 'Verify Node.js Version'
              run: node -v 


            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration/qa org.

            # The steps to generate the url are here 
            # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repositry, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else. 

            # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

            - name: 'Create force-app directory (if it doesnt exist)' # Add this!
              run: |
                    if [ ! -d "changed-sources/force-app" ]; then
                      mkdir -p changed-sources/force-app # -p creates parent dirs if needed
                    fi
            # Now we can use the sfdx scanner to scan the code in the delta directory
            # The output of the scan is stored in a file called apexScanResults.sarif

            # The .sarif file can later be uploaded to github, so that we can see the 
            # results of the scan directly from the PR.
            - name: 'Verify changed-sources directory and contents'
              run: |
               if [ -d "changed-sources" ]; then
               echo "changed-sources directory exists."
                  ls -l changed-sources/
                  tree changed-sources/ # Optional, as before

                  # Loop through files and display contents (for text files)
                  find changed-sources/ -type f -print0 | while IFS= read -r -d $'\0' file; do
                    echo "----------------------------------------"
                    echo "Contents of: $file"
                    echo "----------------------------------------"
                   if [[ $(file -b "$file") == "text/plain"* || $(file -b "$file") == "application/xml"* || $(file -b "$file") == "text/xml"* ]]; then
                    cat "$file"
                  elif [[ $(file -b "$file") == "application/zip"* ]]; then
                    echo "It's a zip file, skipping content display."
                    unzip -l "$file"
                  else 
                    echo "Not a plain text or XML file, skipping content display."
                    file "$file"
                  fi
                done
               else
                  echo "ERROR: changed-sources directory DOES NOT exist."
               
               fi
            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                  cd ..

            # Now we upload the .sarif file as explained in the previous step
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: changed-sources/apexScanResults.sarif

            # We do a check-only deploy and we only run the tests specified in the PR
            # If the env variable does not equal 'all', we know that there is a list of
            # tests that can be run

            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 

            - name: 'Cleanup on Failure'
              if: failure()
              run: |
               PR_NUMBER=${{ github.event.pull_request.number }}
               FILE_PATH=".github/test-classes/pr-$PR_NUMBER.txt"
                   
               if [ -f "$FILE_PATH" ]; then
               echo "Removing test class file due to failure: $FILE_PATH"
               rm -f "$FILE_PATH"
               fi