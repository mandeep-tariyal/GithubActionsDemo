on:
  pull_request:
    types: [closed]
    branches:
      - "developement"

name: Deploy to Salesforce Production

jobs:
  deploy:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.18.0"

      - name: Cache node modules
        uses: actions/cache@v3
        id: npm_cache_id
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
            ${{ runner.os }}-

      - name: Check for package-lock.json
        id: check_lockfile
        run: |
          if [ -f package-lock.json ]; then
            echo "lockfile_exists=true" >> $GITHUB_ENV
          else
            echo "lockfile_exists=false" >> $GITHUB_ENV
          fi

      - name: Install Dependencies
        run: |
          if [ "$lockfile_exists" = "true" ]; then
            npm ci
          else
            npm install --legacy-peer-deps
          fi
      


      # Store secret for both otgs
      - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
        shell: bash
        run: |
            echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt
            echo ${{ secrets.SFDX_STAGING_URL}} > ./SFDX_STAGING_URL.txt
            
      - name: Install Salesforce CLI
        run: |
          npm install --global sfdx-cli
          echo "SFDX installed successfully"
          sfdx --version

      - name: 'Installing sfdx git delta'
        run: | 
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins
          
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: | 
              mkdir changed-sources
              sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 
              
      # Authenticate to org
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

      - name: 'Retrieve Test Classes for PR'
        run: |
             PR_NUMBER=${{ github.event.pull_request.number }}
             if [ -f .github/test-classes/pr-$PR_NUMBER.txt ]; then
               TESTS=$(cat .github/test-classes/pr-$PR_NUMBER.txt)
               echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
              else
              # Set default APEX_TESTS if the file doesn't exist.
              echo "APEX_TESTS" 
              # The pull request body is available through the github context object
              # Set PR_BODY environment variable
              echo "PR_BODY=${{ github.event.pull_request.body }}" >> $GITHUB_ENV # Or export if needed later in the same shell script
             fi
      - name: 'Read PR Body'
        env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
           PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
        run: |
           echo $PR_BODY > ./pr_body.txt
           node ./parsePR.js              
           TESTS=$(cat testsToRun.txt)       
           echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      - name: 'Deploy the entire branch to Integration org'
        run: sfdx force:source:deploy -p "chnaged-sources/force-app" -l --testlevel RunSpecifiedTests -r ${{env.APEX_TESTS}} -w 33 --verbose --loglevel fatal
